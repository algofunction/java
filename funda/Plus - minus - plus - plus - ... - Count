/**
Instructions

Count how often sign changes in array.

result
number from 0 to ... . Empty array returns 0

example
const arr = [1, -3, -4, 0, 5];

/*
| elem | count |
|------|-------|
|  1   |  0    |
| -3   |  1    |
| -4   |  1    |
|  0   |  2    |
|  5   |  2    |
*/

catchSignChange(arr) == 2;
**/


/**
Sample Tests

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.runners.JUnit4;

// TODO: Replace examples and use TDD development by writing your own tests

public class SolutionTest {
    @Test
    public void basicTest() {
        assertEquals(0, Solution.signChange(new int[] {1, 3, 4, 5}));
        assertEquals(2, Solution.signChange(new int[] {1, -3, -4, 0, 5}));
        assertEquals(0, Solution.signChange(new int[] {}));
        assertEquals(3, Solution.signChange(new int[] {-47, 84, -30, -11, -5, 74, 77}));
    }
}
**/

// Solution
import static java.util.stream.IntStream.range;

class Solution {
  static int signChange(int[] arr) {
    return range(1, arr.length).map(i -> (arr[i] ^ arr[i - 1]) < 0 ? 1 : 0).sum();
  }
}
