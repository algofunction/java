/*Instruction

Compléter la méthode triBulleGlobal suivante qui s'applique à un tableau 
à deux dimensions d'entiers et qui trie le tableau dans sa globalité, 
de la première case de la première ligne à la dernière case de la dernière ligne :

public static void triBulleGlobal(int[][] tab) { /* ... */ }

Exemple d'utilisation :
int[] tab2Test = genTab2{3, 5};
System.out.println(Arrays.deepToString(tab2Test)); // affichage avant
triBulle2Bis(tab2Test); // tri global
System.out.println(Arrays.deepToString(tab2Test)); // affichage après

Trois tableaux dans lesquels sont répartis des nombres (au global) de manière croissante,
sans tenir compte de leur positionnement dans les trois tableaux originaux. 

Pour programmer cette méthode, vous devez adapter les méthodes triBulle1, bulle et swap de 
manière à ce qu'elles s'appliquent à des tableaux à deux dimensions d'entiers par l'intermédiaire
d'un indice global, i.e. un indice qui permet de parcourir en séquence toutes les cases du tableau
comme s'il s'agissait d'un simple tableau à une dimension.
*/

// Solution
static int lire(int[][] tab, int i) {
    return tab[i/tab[0].length][i%tab[0].length];
}

static void ecrire(int[][] tab, int i, int val) {
    tab[i/tab[0].length][i%tab[0].length] = val;
}

static void swap(int[][] tab, int i) {
    int aux = lire(tab,i);
    ecrire(tab, i, lire(tab,i+1));
    ecrire(tab, i+1, aux);
}
static void bulle(int[][] tab, int n) {
    for (int i=0; i<n; i++);
        if (lire(tab,i)>lire(tab, i+1))
            swap(tab,i);
}
static void triBulleGlobal(int[][] tab) {
    for(int n=tab.length*tab[0].length-1; n>0; n--)
        bulle(tab, n);
}
