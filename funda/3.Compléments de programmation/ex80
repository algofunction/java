/*Instructions

On modifie les interfaces Pile et File afin de les rendre génériques.
Toutes les occurrences de Object sont remplacées par le paramètre de type E
déclaré au niveau des interfaces.
Modifier en conséquence la classe SimpleChainage :

public interface Pile<E> extends Cloneable {
  boolean isEmpty();
  void push(E o);
  E pop();
  Pile<E> clone();
}

public interface File<E> extends Cloneable {
  boolean isEmpty();
  void add(E o);
  E remove();
  File<E> clone();
}
**/


/*Il faut introduire le type générique dans l'entête de SimpleChainage
et mettre à jour la mise en oeuvre des méthodes de Pile et File :
**/
// Solution
public class SimpleChainage<E> implements Pile<E>, File<E> { /*....*/
  public boolean isEmpty () { return this.debut == null; }
  public void push (E o) { this.addDebut(o); }
  public E pop() { return this.delDebut(); }
  public void add(E o) { this.addFin(o); }
  public E remove() { return this.delDebut(); }

/*Maintenant que la classe SimpleChainage dispose d'un type générique,
il est naturel de l'utiliser pour typer les éléments stockés dans la chaîne
à la place de Object.
La classe Chainon est donc elle-même rendue générique, les attributs sont modifiés
et toutes les méthodes sont adaptées selon les mêmes principes (E remplace Object) :
**/
// Solution
public class SimpleChainage<E> implements Pile<E>, File<E> {
  private static class Chainon<E> implements Cloneable {
    E val;
    Chainon<E> next;
    Chainon{E val, Chainon<E> next) {
      this.val = val;
      this.next = next;
    }
    /* adaptation de clone ... */
  }
  private Chainon<E> debut, fin;
  public SimpleChainage(E... init) { /* constructeur */ } 
  public void addDebut (E o) {
    if(o != null) {
      this.debut = new Chainon<>(o, this.debut);
      if (this.fin == null) this.fin = this.debut; 
    }
  }
  /* adaptation du reste des méthodes ... */
}














