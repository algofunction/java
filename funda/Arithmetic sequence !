/**
Instructions

A sequence is usually a set or an array of numbers that has a strict way for moving from the nth term to the (n+1)th term.
If f(n) = f(n-1) + c where c is a constant value, then f is an arithmetic sequence.

An example would be (where the first term is 0 and the constant is 1) is [0, 1, 2, 3, 4, 5, ... and so on] )
Else if (pun) f(n) = f(n-1) * c where c is a constant value, then f is a geometric sequence.

Example where the first term is 2 and the constant is 2 will be [2, 4, 8, 16, 32, 64, ... to infinity ... ]
There are some sequences that aren't arithmetic nor are they geometric.
Here is a link to feed your brain : Sequence !

You're going to write a function that's going to return the value in the nth index of an arithmetic sequence.
(That is, adding a constant to move to the next element in the "set").

The function's name is nthterm/Nthterm, it takes three inputs first,n,c where:
first is the first value in the 0 INDEX.
n is the index of the value we want.
c is the constant added between the terms.

Remember that first is in the index 0 .. just saying ...
**/

/**Sample tests

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ArithmeticSequenceTest {
  
  @Test
  public void testArithmeticSequence_knownValues() {
    assertEquals("Wrong answer for first = 0 n = 55 d = 1", 55, Sequence.nthterm(0, 55, 1));
    assertEquals("Wrong answer for first = 0 n = 100 d = 5", 500, Sequence.nthterm(0, 100, 5));
    assertEquals("Wrong answer for first = 14 n = 4 d = 7", 42, Sequence.nthterm(14, 4, 7));
    assertEquals("Wrong answer for first = 10000 n = 99 d = -50", 5050, Sequence.nthterm(10000, 99, -50));
    assertEquals("Wrong answer for first = 10000 n = 110 d = -50", 4500, Sequence.nthterm(10000, 110, -50));
    assertEquals("Wrong answer for first = 0 n = 99 d = 1", 99, Sequence.nthterm(0, 99, 1));
  }
}
**/


// Solution
public class Sequence {
  public static int nthterm(int first, int n, int c) {
    return first + (n * c);
  }
}
