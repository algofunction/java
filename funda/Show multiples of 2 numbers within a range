/**
Instructions

Print all numbers up to 3rd parameter which are multiple of both 1st and 2nd parameter.

Python, Javascript, Java, Ruby versions: return results in a list/array

NOTICE:
Do NOT worry about checking zeros or negative values.
To find out if 3rd parameter (the upper limit) is inclusive or not, check the tests, it differs in each translation
**/

/**
Sample Tests

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.runners.JUnit4;
import java.util.*;

public class SolutionTest {
    @Test
    public void testSomeValues14() {
      List<Integer> list1 = Solution.findMultiples(2,4,40);
      List<Integer> list2 = new ArrayList<Integer>(Arrays.asList(4, 8, 12, 16, 20, 24, 28, 32, 36));      
      System.out.println(list1+"\n"+list2);
      assertEquals(true, list2.equals(list1));
    }
    @Test
    public void testSomeValues() {
      List<Integer> list1 = Solution.findMultiples(5,13,800);
      List<Integer> list2 = new ArrayList<Integer>(Arrays.asList(65, 130, 195, 260, 325, 390, 455, 520, 585, 650, 715, 780));      
      System.out.println(list1+"\n"+list2);
      assertEquals(true, list2.equals(list1));
    }
    @Test
    public void testSomeValues4() {
      List<Integer> list1 = Solution.findMultiples(7,16,1000);
      List<Integer> list2 = new ArrayList<Integer>(Arrays.asList(112, 224, 336, 448, 560, 672, 784, 896));      
      System.out.println(list1+"\n"+list2);
      assertEquals(true, list2.equals(list1));
    }    
}
**/

// Solution
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Solution {
    public static List<Integer> findMultiples(int s1, int s2, int s3) {
      return IntStream.range(1, s3).filter(i -> i%s1==0 && i%s2==0).boxed().collect(Collectors.toList());
    }
}

/**
mport java.util.List;
import java.util.stream.IntStream;
import java.util.stream.Collectors;

public class Solution {

    public static List<Integer> findMultiples(int s1, int s2, int s3) {
        return IntStream.range(1, s3)
                        .filter(i -> i % s1 == 0 && i % s2 == 0)
                        .boxed()
                        .collect(Collectors.toList());
    }
}
**/
